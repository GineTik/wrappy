#!/usr/bin/env node

import { DependencyInjector } from './src/core/DependencyInjector.js';
import path from 'path';

async function testDependencyInjection() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Dependency Injection');
  console.log('====================================');
  
  const containerPath = './examples/hello-world';
  const packagesPath = './examples/packages';
  const dependencies = ['node-18@18.17.0'];
  
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—Å—Ç–∏–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ injection'–∏
    await DependencyInjector.removeDependencyInjection(containerPath);
    
    // –í–∏–∫–æ–Ω–∞—î–º–æ injection
    console.log('üì¶ –Ü–Ω–∂–µ–∫—Ç—É—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ...');
    await DependencyInjector.injectDependencies(containerPath, dependencies, packagesPath);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    console.log('\nüìã –°–ø–∏—Å–æ–∫ —ñ–Ω–∂–µ–∫—Ç–æ–≤–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:');
    const commands = await DependencyInjector.listInjectedCommands(containerPath);
    console.log(commands.length > 0 ? commands : '–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥');
    
    console.log('\n‚úÖ Dependency injection –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏: cd examples/hello-world && ./scripts/default.sh');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  }
}

testDependencyInjection();